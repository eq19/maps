name: 'Docker Deploy Action'

description: >
  ðŸª‚  A Github Action to deploy pages conveniently

branding:
  icon: 'command'
  color: 'red'

inputs:
  docker_hub_username:
    description: Username for Docker Hub
    default: ${{ github.actor }}       
    required: true
  docker_hub_password:
    description: Docker Hub authentication token
    required: true
  docker_hub_token:
    description: Docker Hub authentication token
    required: true
  credentials:
    description: 'The gcloud credentials'
    required: true
  image_name:
    description: Tag to use for the new image
    default: ${{ github.action_repository }}
    required: true
  dockerfile_path:
    description: Path to the dockerfile from which to build the image
    required: true
  initiate_pauli:
    description: Build args
    required: false
    default: ""
  docker_hub_repo_short_description:
    description: Short description text for the docker hub repo
    required: true
  docker_hub_repo_readme_file_path:
    description: |
      Path of the md file which will be used as the docker hub repo readme
    required: true
  cache_src:
    description: Path for the docker cache source
    required: false
    default: /tmp/.buildx-cache
  cache_dest:
    description: Path for the docker cache destination
    required: false
    default: /tmp/.buildx-cache-new
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  repository:
    description: 'The deploy repository'
    default: ${{ github.repository }}
    required: false

outputs:
  spin:
    description: 'The spin of current repository'
    value: ${{ steps.set_output.outputs.runCmdOutput }}
  private_key:
    description: 'The generated key to connect to VM'
    value: ${{ steps.matadata.outputs.private_key }}

runs:
  using: composite
  steps:
    - name: ðŸ’Ž Set Artifact
      if: runner.os != 'Windows'
      id: artifact
      shell: bash
      env:
        TMP: ${{ inputs.tmp }}
        RUN: ${{ github.run_id }}
        USER: ${{ github.actor }}
        TOKEN: ${{ inputs.token }}
        REPO: ${{ github.repository }}
        ACTOR: ${{ github.triggering_actor }}
        OWNER: ${{ github.repository_owner }}
      run: |      
        rm -rf ${{ github.action_path }}/.git
        mv -f ${{ github.action_path }}/_config.yml ${RUNNER_TEMP}/
        export PATH=$GITHUB_WORKSPACE/.github/entrypoint:$PATH && artifact.sh
        shopt -s dotglob && mv -f ${RUNNER_TEMP}/workdir/* ${{ github.action_path }}/
        mkdir -p ${{ github.workspace }}/_site && cp -R ${{ github.action_path }}/. ${{ github.workspace }}/_site/       

    - name: ðŸ’Ž Set ID Token
      if: runner.os != 'Windows'
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'id_token'
        credentials_json: ${{ inputs.credentials }}
        id_token_audience: 'https://us-central1-feedmapping.cloudfunctions.net/function'

    #Ref: https://github.com/google-github-actions/auth/blob/main/docs/EXAMPLES.md#generating-an-id-token-jwt
    - name: Run identity
      if: runner.os != 'Windows'
      shell: bash
      run: >
        curl -s -X POST https://us-central1-feedmapping.cloudfunctions.net/function 
        -H "Authorization: Bearer ${{ steps.auth.outputs.id_token }}" -H "Content-Type: application/json" -d
        '{
           "tags": {
             "items": ${{ steps.artifact.outputs.orgs_json }}
          }
        }' | jq '.'
    
    - uses: ikalnytskyi/action-setup-postgres@v6 
      if: runner.os != 'Windows'
      id: postgres
      with:
        username: yoda
        password: GrandMaster
        database: test
        port: 34837

    - run: |
        cp ./.github/entrypoint/test.py .
        python3 -m pytest -vv test.py
      env:
        CONNECTION_URI: ${{ steps.postgres.outputs.connection-uri }}
        SERVICE_NAME: ${{ steps.postgres.outputs.service-name }}
        EXPECTED_CONNECTION_URI: postgresql://yoda:GrandMaster@localhost:34837/test
        EXPECTED_SERVICE_NAME: yoda
      if: runner.os != 'Windows'
      shell: bash

    - name: ðŸš€ Initiate Feed Container
      if: runner.os != 'Windows'
      uses: devcontainers/ci@v0.3
      id: set_output
      with:
        push: always
        runCmd: ls -al /
        skipContainerUserIdUpdate: true
        imageName: ${{ inputs.image_name }}
        imageTag: spin-${{ env.ID }}
        configFile: ${{ github.action_path }}/.devcontainer.json

    # Ref: https://cloud.google.com/compute/docs/instances/create-start-instance
    - name: ðŸ’Ž Remove Existing Self-Hosted Runner
      if: runner.os == 'Windows'
      shell: bash
      run: |
        for instance_uri in $(gcloud compute instances list --uri 2> /dev/null); do
          instance_name=${instance_uri##*/}
          instance_zone_uri=${instance_uri/\/instances\/${instance_name}/}
          instance_zone=${instance_zone_uri##*/}
          if [ -n "${instance_name}" ] && [ -n "${instance_zone}" ] && gcloud compute instances delete ${instance_name} --zone ${instance_zone} --quiet; then
            echo "deleted: ${instance_zone}/${instance_name}"
          fi
        done

    - name: ðŸª‚ Remove existing images
      id: variables
      shell: bash
      run: |
        BASE_NAME=$(basename ${{ inputs.image_name }})
        if [[ "$RUNNER_OS" == "Windows" ]]; then YQ=$(choco install yq); fi
        IFS=', '; array=($(curl -L -s 'https://registry.hub.docker.com/v2/repositories/${{ inputs.image_name }}/tags?page_size=1024' | jq -rc '."results"[]["name"]' | yq eval -P | sed "s/ /, /g")) 
        for ((i=0; i < ${#array[@]}; i++)); do
          if [[ "${array[$i]}" != "latest" ]]; then
            if [[ "$RUNNER_OS" == "Windows" ]]; then
              image_tag="${array[$i]}"
              echo 'IMAGE_TAG='${image_tag##*-} >> ${GITHUB_ENV}
            else
              HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ inputs.docker_hub_username }}\", \"password\": \"${{ inputs.docker_hub_password }}\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
              curl -s -i -X DELETE -H "Accept: application/json" -H "Authorization: JWT $HUB_TOKEN" https://hub.docker.com/v2/namespaces/${{ inputs.docker_hub_username }}/repositories/$BASE_NAME/tags/${array[$i]}
              echo "deleted: ${{ inputs.image_name }}:${array[$i]}"
            fi
          fi
        done
  
    # See https://github.com/thesofproject/sof/blob/main/zephyr/docker-run.sh
    - name: ðŸª‚ Cloud Config
      if: runner.os == 'Windows'
      id: metadata
      shell: bash
      run: |
        cat << EOL >> cloud-config
        #cloud-config
        users:
        - default
        - uid: 1000
          name: vscode
          groups: admin,adm,video,docker,google-sudoers
        - uid: 2000
          name: runner
          groups: admin,adm,video,docker,google-sudoers

        write_files:
        - path: /etc/systemd/system/firewall.service
          permissions: 0644
          owner: root
          content: |
            [Unit]
            Description=Configures the host firewall

            [Service]
            Type=oneshot
            RemainAfterExit=true
            ExecStart=/sbin/iptables -A INPUT -p tcp \
              --match multiport --dports 80,5432,6379 -j ACCEPT

        - path: /etc/systemd/system/redis.service
          permissions: 0644
          owner: root
          content: |
            [Unit]
            Description=Redis service
            After=docker.service firewall.service
            Wants=docker.service firewall.service

            [Service]
            Restart=always
            ExecStop=/usr/bin/docker exec myredis -s quit
            ExecStart=/usr/bin/docker run --rm \
              --name=myredis -p 6379:6379 --pull=always eq19/maps:target-${{ github.run_number }}

        - path: /etc/systemd/system/postgres.service
          permissions: 0644
          owner: root
          content: |
            [Unit]
            Description=Postgres service
            After=redis.service
            Wants=redis.service

            [Service]
            Restart=always
            ExecStop=/usr/bin/docker exec mydb -s quit
            ExecStart=/usr/bin/docker run --rm \
              -e POSTGRES_DB=postgres \
              -e POSTGRES_USER=postgres \
              -e POSTGRES_PASSWORD=postgres \
              --name=mydb -p 5432:5432 --pull=always eq19/feed:spin-${{ env.IMAGE_TAG }}

        - path: /etc/systemd/system/runner.service
          permissions: 0644
          owner: root
          content: |
            [Unit]
            Description=gcloud compute
            Wants=postgres.service
            After=postgres.service

            [Service]
            RestartSec=5s
            Restart=on-failure
            Environment=HOME=/home/runner
            ExecStop=/usr/bin/docker stop myrunner
            ExecStopPost=/usr/bin/docker rm myrunner
            ExecStartPre=/usr/bin/docker-credential-gcr configure-docker
            ExecStart=/usr/bin/docker run --rm \
              -e RUNNER_REPLACE_EXISTING=true \
              -e RUNNER_NAME=Google-optimized-instance \
              -e RUNNER_REPOSITORY_URL=https://github.com/${{ inputs.repository }} \
              -e GITHUB_ACCESS_TOKEN=${{ inputs.token }} \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v /mnt:/mnt \
              --name myrunner --pull=always eq19/lexer:id-${{ env.IMAGE_TAG }}

        runcmd:
        - systemctl daemon-reload
        - systemctl start runner.service
        - systemctl status runner.service

        bootcmd:
        - fsck.ext4 -tvy /dev/sdb1
        - mkdir -p /mnt/disks/platform
        - mount -o nosuid,nodev,commit=30,defaults -t ext4 /dev/sdb1 /mnt/disks/platform
        EOL
        echo 'user_data='$(awk '{printf "%s\\n", $0}' cloud-config) >> ${GITHUB_OUTPUT}

    # Ref: https://stackoverflow.com/a/47018417/4058484
    - name: ðŸª‚ Setup Runner by Gcloud
      if: runner.os == 'Windows' #&& os.linux.outcome == 'success'
      id: compute_instances
      shell: bash
      run: >
        gcloud compute instances create grid-${{ env.IMAGE_TAG }}
        --service-account=project-owner@feedmapping.iam.gserviceaccount.com
        --zone=us-central1-a --machine-type=e2-micro --enable-display-device --tags=https-server
        --boot-disk-device-name=cos --image-project cos-cloud --image-family cos-stable --metadata-from-file=user-data=cloud-config
        --create-disk=boot=no,auto-delete=no,name=tensorflow,device-name=deeplearning,mode=ro,size=50,type=pd-standard,image-project=deeplearning-platform-release,image-family=tf-ent-latest-gpu
