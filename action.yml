oname: Build devcontainer
description: Build a devcontainer that is compliant with the spec

inputs:
  provider:
    description: 'The deploy provider'
    required: true
  owner:
    description: 'The deploy owner'
    required: false
  token:
    description: 'The deploy token'
    required: false
  credentials:
    description: 'The gcloud credentials'
    required: true
  repository:
    description: 'The deploy repository'
    required: false
  branch:
    description: 'The deploy branch'
    required: false
  actor:
    description: 'The github username creating the commit'
    required: false
  cname:
    description: 'The cname to use for the site'
    required: false
  bundler_ver:
    description: 'The Bundler version'
    required: false
  image_tag:
    description: 'The image_tag website baseurl'
    default: 'latest'
    required: false
  pre_build_container:
    description: 'The pre-build docker container'
    default: 'eq19/prime'
    required: false

branding:
  icon: 'command'
  color: 'red'

runs:
  using: composite
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 20
    
    - name: ðŸš€ Initiate Lexer
      uses: devcontainers/ci@v0.3
      with:
        push: always
        runCmd: ls -al /
        #runCmd: make ci-build
        #runCmd: service postgresql start
        skipContainerUserIdUpdate: true
        cacheFrom: tcardonne/github-runner
        imageTag: ${{ image_tag }}
        imageName: ${{ inputs.pre_build_container }}
        env: |
          INPUT_TOKEN=${{ inputs.token }}
      #if: ${{ contains(github.repository, 'github.io') }}

    - name: Connect to PostgreSQL
      if: runner.os == 'Windows'
      # Runs a script that creates a PostgreSQL table, populates
      # the table with data, and then retrieves the data.
      env:
        POSTGRES_PORT: 5432
        POSTGRES_HOST: localhost
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
      shell: bash
      run: |
        npm install --package-lock-only pg
        npm ci && sudo -u postgres -i
        node client.js
