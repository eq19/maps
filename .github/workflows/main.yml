# Deploy GitHub Pages
name: Build and deploy eQuantum site

# Runs on workflow_run.conclusion
on:
  #push:
  workflow_run:
    types: [completed]
    workflows: ["pages-build-deployment"]
  
# Allow concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

# Set GITHUB_TOKEN scopes
permissions: write-all

# Global environtment variables
env:
  RUN: ${{ github.run_id }}
  USER: ${{ github.actor }}
  REPO: ${{ github.repository }}
  OWNER: ${{ github.repository_owner }}
  ACTOR: ${{ github.triggering_actor }}
  
jobs:
  determine-runner:
    runs-on: ubuntu-latest
    outputs:
      runner: ${{ steps.set-runner.outputs.use-runner }}
    steps:
      - name: ðŸ“‚ Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
 
      - name: ðŸª‚ Set Container
        uses: eq19/eq19.github.io@v2
        with:
          docker_hub_username: ${{ github.actor }}
          docker_hub_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          dockerfile_path: ./.devcontainer/Dockerfile
          credentials: ${{ secrets.GCP_CREDENTIALS }}
          image_name: "prime"
          image_tag: "latest"

      - name: ðŸš€ Build Feed on Linux
        uses: eq19/feed@v3
        with:
          pre_build_commands: 'make build'
          token: ${{ secrets.ACCESS_TOKEN }}
   
      - name: ðŸš€ Pre-build Maps
        #uses: eq19/maps@v1
        uses: devcontainers/ci@v0.3
        with:
          push: always
          runCmd: ls -al /maps
          imageName: eq19/prime
          skipContainerUserIdUpdate: true
          cacheFrom: tcardonne/github-runner
        if: ${{ contains(github.repository, 'github.io') }}
     
  github-pages:
    needs: determine-runner
  
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        #node_version: [8, 10, 12]
        os: [windows-latest, self-hosted]
    runs-on: ${{ matrix.os }}
    #runs-on: ${{ fromJson(needs.determine-runner.outputs.runner) }}
    
    if: ${{github.event_name == 'push' ||
        github.event.workflow_run.conclusion == 'success'}}

    steps:
      - name: ðŸ“‚ Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          repository: eq19/eq19.github.io

      - name: ðŸš€ Initiate Lexer on Linux
        if: runner.os == 'Windows'
        uses: eq19/lexer@v1
        id: set-runner
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}

      - name: ðŸš€ Build Parser on Runner
        if: runner.os == 'Windows'
        uses: eq19/parser@v1
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.ACCESS_TOKEN }}
          credentials: ${{ secrets.GCP_CREDENTIALS }}
  
      - name: ðŸª‚ Evaluate Syntax Tree
        if: runner.os == 'Windows'
        uses: Vampire/setup-wsl@v3

      - name: ðŸª‚ Grammar Languange
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '3.1.x'
       
      - name: ðŸ’Ž Rule Settings
        if: runner.os != 'Windows'
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { spawnSync } = require( 'child_process' )
            const ls = spawnSync('ls', [ '-al', '/usr/bin' ] )
            console.log( `stdout: ${ ls.stdout.toString() }` )

      - name: Check structure
        if: runner.os != 'Windows'
        run: |
          id
          pwd
          ls -al .
          ls -al /
          ls -al /maps
          ls -al /maps/_site
          ls -al /home/runner
